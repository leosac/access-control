name: Release
on:
  schedule:
    - cron: '0 1 * * 6' # Every saturday at 1am
  push:
    tags:
      - v*
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.prepare.outputs.docker_image }}
      docker_buildimage: ${{ steps.prepare.outputs.docker_buildimage }}
      version: ${{ steps.prepare.outputs.version }}
      platforms: ${{ steps.prepare.outputs.platforms }}
      docker_variables: ${{ steps.prepare.outputs.docker_variables }}
    steps:
      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=maxhy/leosac
          DOCKER_BUILDIMAGE=maxhy/leosac-buildsystem
          DOCKER_PLATFORMS=linux/amd64,linux/arm/v7,linux/arm64
          VERSION=edge

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=weekly
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=snapshot
          fi
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            DOCKER_PLATFORMS=linux/amd64
          fi

          TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
          fi

          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=docker_buildimage::${DOCKER_BUILDIMAGE}
          echo ::set-output name=platforms::${DOCKER_PLATFORMS}
          echo ::set-output name=version::${VERSION}

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        platform: [ 'linux/amd64', 'linux/arm64', 'linux/arm/v7' ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Run ${{ matrix.platform }}
        if: success() && github.event_name != 'pull_request'
        run: docker run --entrypoint=/bin/bash \
          --platform ${{ matrix.platform }} \
          -v "${GITHUB_WORKSPACE}:/tmp/leosac" \
          ${{needs.prepare.outputs.docker_buildimage}} \
          -c "TARGETPLATFORM=${{ matrix.platform }} && \
          VERSION=${{ needs.prepare.outputs.version }} && \
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') && \
          VCS_REF=${GITHUB_SHA::8} && \
          export TARGETPLATFORM VERSION BUILD_DATE VCS_REF && /tmp/leosac/docker_scripts/build_leosac.sh"
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: ${{ matrix.platform }}
          path: build/packages/debian/${{ matrix.platform }}/*.deb

  docker:
    runs-on: ubuntu-latest
    needs: [ prepare, build ]
    steps:
      - name: Prepare
        id: prepare
        run: |
          TAGS="--tag ${{ needs.prepare.outputs.docker_image }}:${{ needs.prepare.outputs.version }}"
          if [[ ${{ needs.prepare.outputs.version }} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${{ needs.prepare.outputs.docker_image }}:latest"
          fi

          echo ::set-output name=buildx_args::--platform ${{ needs.prepare.outputs.platforms }} \
            --build-arg VERSION=${{ needs.prepare.outputs.version }} \
            ${TAGS}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      - name: Docker Login
        if: success()
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: actions/download-artifact@v3
        if: success()
        with:
          path: build/packages/debian
      - name: Build Docker Leosac Main
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build --push {{ steps.prepare.outputs.buildx_args }} --file ./docker/Dockerfile.main build/packages/debian
      - name: Inspect image
        if: always() && github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ needs.prepare.outputs.docker_image }}:${{ needs.prepare.outputs.version }}
